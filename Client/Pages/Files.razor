@page "/Files"
@inject HttpClient Http
@inject IJSRuntime Js
@attribute [Authorize]

<h3>Files</h3>

<SfUploader MaxFileSize="100_000_000" ID="UploadFiles">
    <UploaderAsyncSettings SaveUrl="api/File/Upload"></UploaderAsyncSettings>
    <UploaderEvents Success="@SuccessHandler"></UploaderEvents>
</SfUploader>

@if (FileContext == null)
{
    <text>Please wait, loading content...</text>
}
else if (FileContext.Length == 0)
{
    <text>It's empty here... Upload something.</text>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>File Name</th>
            <th>File Extension</th>
            <th>Upload Date (UTC)</th>
            <th>File Size</th>
            <th>Uploaded By</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var file in FileContext)
        {
            <tr>
                <td>@Path.GetFileNameWithoutExtension(file.FileName)</td>
                <td>@Path.GetExtension(file.FileName)</td>
                <td>@file.UploadDate.ToString("yyyy-MM-dd HH:mm:ss")</td>
                @switch (file.FileSize)
                {
                    case > 1_000 and < 1_000_000:
                        <td>@string.Format($"{file.FileSize / 1_000:N0}KB")</td>
                        break;
                    case >= 1_000_000:
                        <td>@string.Format($"{file.FileSize / 1_000_000:N0}MB")</td>
                        break;
                    default:
                        <td>@string.Format($"{file.FileSize:N0}B")</td>
                        break;
                }
                <td>@file.UploaderName</td>
                <td>
                    <a href="api/File/Download/@file.FileNameGuid" class="btn btn-primary" download>Download</a>
                    <button @onclick="() => DeleteFile(file.FileNameGuid)" class="btn btn-danger mx-1">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    //https://www.c-sharpcorner.com/article/creating-search-feature-in-blazor-server-grid/
    //https://www.daveabrock.com/2021/01/14/blast-off-blazor-search-box/

    FileContext[] FileContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        FileContext = await Http.GetFromJsonAsync<FileContext[]>("api/File/GetFiles");
        StateHasChanged();
    }

    async void SuccessHandler(SuccessEventArgs args) => await OnInitializedAsync();

    async void DeleteFile(string fileGuid)
    {
        var file = FileContext.First(x => x.FileNameGuid == fileGuid);
        if (await Js.InvokeAsync<bool>("confirm", $"Do you want to delete ({file.FileNameGuid}) {file.FileName}'s Record?"))
        {
            await Http.DeleteAsync($"api/File/Delete/{file.FileNameGuid}");
            await OnInitializedAsync();
        }
    }
    
    // https://www.thecodehubs.com/sorting-table-in-blazor/
}
