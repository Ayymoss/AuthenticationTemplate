@page "/Developer"
@inject HttpClient Client
@inject IJSRuntime Js
@attribute [Authorize(Roles = nameof(RoleName.SuperAdmin))]

<h3>Developers</h3>
<small>Add as many developers as you wish.</small>
<div class="form-group">
    <a class="btn btn-success" href="/Developer/Create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>

@if (Developers == null)
{
    <text>Loading...</text>
}
else if (Developers.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Experience (Years)</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var dev in Developers)
        {
            <tr>
                <td>@dev.Id</td>
                <td>@dev.FirstName</td>
                <td>@dev.LastName</td>
                <td>@dev.Email</td>
                <td>@dev.Experience</td>
                <td>
                    <a class="btn btn-success" href="/Developer/Edit/@dev.Id">Edit</a>
                    <button class="btn btn-danger" @onclick="() => Delete(dev.Id)">Delete</button>
                </td>
            </tr>
        }

        </tbody>
    </table>
}
@code {
    Developer[] Developers { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Developers = await Client.GetFromJsonAsync<Developer[]>("api/Developer");
    }

    async Task Delete(int developerId)
    {
        var dev = Developers.First(x => x.Id == developerId);
        if (await Js.InvokeAsync<bool>("confirm", $"Do you want to delete {dev.FirstName}'s ({dev.Id}) Record?"))
        {
            await Client.DeleteAsync($"api/Developer/{developerId}");
            await OnInitializedAsync();
        }
    }
}
