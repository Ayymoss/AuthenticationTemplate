@page "/Account/Register"
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject CustomStateProvider AuthStateProvider

<h1 class="h2 font-weight-normal login-title">Register</h1>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="RegisterRequest">
    <DataAnnotationsValidator/>

    <div class="form-label">
        <label for="inputUsername" class="required">Username</label>
        <InputText id="inputUsername" class="form-control" placeholder="Username" autofocus @bind-Value="@RegisterRequest.UserName"/>
    </div>

    <div class="form-label">
        <label for="inputUsername" class="required">Email</label>
        <InputText id="inputEmail" class="form-control" placeholder="Email" @bind-Value="@RegisterRequest.Email"/>
    </div>

    <div class="form-label">
        <label for="inputPassword" class="required">Password</label>
        <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="@RegisterRequest.Password"/>
    </div>

    <div class="form-label">
        <label for="inputPasswordConfirm" class="required">Password Confirmation</label>
        <InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="Password Confirmation" @bind-Value="@RegisterRequest.ConfirmPassword"/>
    </div>

    <ValidationSummary/>

    <div>
        <button class="btn btn-primary" type="submit">Create account</button>
        <label class="text-danger">@Error</label>
    </div>
</EditForm>

@functions{

    RegisterRequest RegisterRequest { get; set; } = new();
    string Error { get; set; }

    async Task OnSubmit()
    {
        Error = null;
        try
        {
            await AuthStateProvider.Register(RegisterRequest);
            ToastService.ShowSuccess("Registration successful");
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

}
